<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="/function/Babel.js"></script>
    <script src="/function/React.js"></script>
    <script src="/function/ReactDOM.js"></script>
    <link rel="shortcut icon" href="/PUBLIC/ASSETS/IMAGES/favicon.png" type="image/x-icon">
    <link rel="stylesheet" href="/PUBLIC/css/recruiter_style.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

    <script crossorigin src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <title>Recruiter Dashboard | AimHire</title>
    <style>
        .profile-pic {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin: 0 auto;
            background-color: #fff;
            box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
            object-fit: contain;
        }
    </style>
</head>
<body>
    <section class="recruiter-section">
        <!-- side navbar -->
        <nav class="recruiter-navigation" id="sidenavbar"></nav>
        <!-- side navbar ends -->

        <!-- main content section starts -->
        <div class="recruiter-main-container">
            <header class="recruiter-header" id="recruiter_header"></header>

           <!-- content area jaha pain content rhega  -->
           <div class="recruiter-application-container" id="application-container"></div>

           <% if(toastNotification){ %>
            <div id="toastBox"></div>
          <% } %>
        

            <footer>
                <div class="footerContainer" id="footer"></div>
            </footer>
        </div>
        <!-- main content section ends -->
    </section>
    <script>
        let toastBox = document.getElementById("toastBox");
        let toastMsg = '<i class="fa-regular fa-square-check"></i><%=toastNotification%>' ;
    
        window.onload = function (msg) {
          let toast = document.createElement("div");
          toast.classList.add("toast");
          toast.innerHTML = toastMsg;
          toastBox.appendChild(toast);
          setTimeout(() => {
            toast.remove();
          }, 6000);
        };
      </script>

    <script type="text/babel" src="/PUBLIC/components/AdminSideNavBar.js"></script>
    <script type="text/babel" src="/PUBLIC/components/RecruiterHeader.js"></script>
    <script type="text/babel" src="/PUBLIC/COMPONENTS/RecruiterFooter.js"></script>

    <script type="text/babel">
        const profilePic = "<%= profilePic %>";
        const username = "<%= username %>";
        console.log('profile pic val: ' + profilePic);
        console.log(profilePic);

        const { useState, useEffect } = React;
        function App(){
            const [recruiterList, setRecruiterList] = useState([]);
            const [companyFilter, setCompanyFilter] = useState("");
            const [statusFilter, setStatusFilter] = useState("");

            const [currentPage, setCurrentPage] = useState(1);
            const itemsPerPage = 5;

            useEffect(()=>{
                fetchRecruiterData();
            }, []);

            // fetch function to get all recruiter data
            const fetchRecruiterData = ()=>{
                axios.get('http://localhost:3200/admin/recruiterList').then((response)=>{
                    setRecruiterList(response.data.rows);
                }).catch((error)=>{
                    console.error("Error fetching data:", error);
                });
            };

            // filter json object
            const applyFilter = ()=>{
                const filter = {
                    company: companyFilter,
                    status: statusFilter
                };

                // get the filtered recruiter list
                axios.post('http://localhost:3200/admin/filterRecruiter', filter)
                .then(response => {
                    setRecruiterList(response.data.rows);
                    setCurrentPage(1);
                })
                .catch(error => {
                    console.error('Error applying filters:', error);
                });
            };

            const handleCompanyChange = (event) => {
                const selectedCompany = event.target.value;
                setCompanyFilter(selectedCompany);
            };

            const handleStatusChange = (event) => {
                const selectedStatus = event.target.value;
                setStatusFilter(selectedStatus);
            };

            const handleFilterSubmit = (event) => {
                event.preventDefault();
                applyFilter();
            };

            const indexOfLastRecruiter = currentPage * itemsPerPage;
            const indexOfFirstRecruiter = indexOfLastRecruiter - itemsPerPage;
            const currentRecruiters = recruiterList.slice(indexOfFirstRecruiter, indexOfLastRecruiter);

            const totalPages = Math.ceil(recruiterList.length / itemsPerPage);

            const handlePageChange = (pageNumber) => {
                setCurrentPage(pageNumber);
            };

            return(
                <>
                    <div className="application-filter-box">
                        <div className="filter-title-box">
                            <div className="filter-title">
                                <i className="fa-solid fa-filter"></i>
                                <h3>Filter</h3>
                            </div>
                        </div>
                        <div className="dropbox_filter">
                            <select className="sel_box" value={companyFilter} onChange={handleCompanyChange}>
                            <option value="">Select a Company</option>
                            <option value="Accenture">Accenture</option>
                            <option value="Airtel">Airtel</option>
                            <option value="Deloitte">Deloitte</option>
                            <option value="Amazon">Amazon</option>
                            <option value="Google">Google</option>
                            <option value="Microsoft">Microsoft</option>
                            <option value="PayPal">PayPal</option>
                            <option value="Cisco">Cisco</option>
                            <option value="Persistant">Persistant</option>
                            <option value="IBM">IBM</option>
                            <option value="Samsung">Samsung</option>
                            <option value="Infosys">Infosys</option>
                            </select>
                        </div>

                        <div className="dropbox_filter">
                            <select className="sel_box" value={statusFilter} onChange={handleStatusChange}>
                            <option value="">Select Account Status</option>
                            <option value="1">Active</option>
                            <option value="0">Inactive</option>
                            </select>
                        </div>

                        <div class="recruiter-filter-btn-box">
                            <button type="submit" className="filter-btn" onClick={handleFilterSubmit}>Apply</button>
                            <button type="reset" className="filter-btn close-all-btn">Clear All</button>
                        </div>
                    </div>

                    <div class="table-box">
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Profile</th>
                                        <th>Name</th>
                                        <th>Company</th>
                                        <th>Email ID</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {
                                        currentRecruiters.map((recruiter, index)=>(
                                            <tr key={index}>
                                            <td><img class="profile-pic" src={`/PUBLIC/ASSETS/IMAGES/company_logos/${recruiter.profile_photo}`}/></td>
                                            {
                                                recruiter.creator_fname ? (
                                                    <td>{recruiter.creator_fname} {recruiter.creator_lname}</td>
                                                ) : (
                                                    <td>---</td>
                                                )
                                            }
                                            
                                            <td>{recruiter.company}</td>
                                            
                                            {
                                                recruiter.emailID ? (
                                                    <td>{recruiter.emailID}</td>
                                                ) : (
                                                    <td>---</td>
                                                )
                                            }
                                            {
                                                recruiter.isActive == 1 ? (
                                                    <td className="status-col"><span class="status active">Active</span></td>
                                                ) : (
                                                    <td className="status-col"><span class="status inactive">Deactive</span></td>
                                                )
                                            }

                                            {
                                                recruiter.isActive == 1 ? (
                                                    <td><a class="action-btn" href={`/admin/takeAction?creator_id=${recruiter.creator_id}&isActive=0`}>Deactivate</a></td>
                                                ) : (
                                                    <td><a class="action-btn" href={`/admin/takeAction?creator_id=${recruiter.creator_id}&isActive=1`}>Activate</a></td>
                                                )
                                            }
                                            <td>
                                                <a href={`/admin/editRecruiter?creator_id=${recruiter.creator_id}`} className="editButton">Edit <i class="fa-solid fa-pen-to-square"></i></a>
                                            </td>                                           
                                            <td className="deleteButton"><a href={`/admin/deleteRecruiter?creator_id=${recruiter.creator_id}`}><i class="fa-solid fa-trash"></i></a></td>
                                        </tr>
                                        ))
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div className="page-number-box">
                            <h3>Pages</h3>
                            <div className="pageNumberContent">
                                {Array.from({ length: totalPages }, (_, index) => (
                                    <div
                                        key={index}
                                        className={`pagenumber ${currentPage === index + 1 ? 'active' : ''}`}
                                        onClick={() => handlePageChange(index + 1)}
                                    >
                                        {index + 1}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>

                </>
            );
        };

        ReactDOM.createRoot(document.getElementById('sidenavbar')).render(
            <AdminSideNavBar/>
        );

        ReactDOM.createRoot(document.getElementById('recruiter_header')).render(
            <RecruiterHeader title='Admin Panel' profilePic={profilePic} username = {username} />
        );
        ReactDOM.createRoot(document.getElementById('application-container')).render(
            <App/>
        );
        ReactDOM.render(<RecruiterFooter />, document.getElementById("footer"));

    </script>   
</body>
</html>
